<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.plat</groupId>
	<artifactId>web</artifactId>
	<version>8.0.0-SNAPSHOT</version>
	<name>web</name>
	<description>Demo project for Spring Boot</description>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<properties>
		<java.version>1.8</java.version>
		<docker.repostory>192.168.202.129:8082</docker.repostory>

		<docker.plugin.version>0.32.0</docker.plugin.version>
		<docker.host>http://192.168.202.129:2375</docker.host>
		<docker.registry>192.168.202.129:8082</docker.registry>
		<docker.namespace>library</docker.namespace>
		<docker.username>admin</docker.username>
		<docker.password>admin</docker.password>
	</properties>


	<!--指定仓库地址推送地址-->
	<distributionManagement>
		<snapshotRepository>
			<!--此名称要和.m2/settings.xml中设置的ID一致-->
			<id>nexus-registry</id>
			<url>http://192.168.202.129:8081/repository/maven-snapshots/</url>
		</snapshotRepository>

		<repository>
			<!--此名称要和.m2/settings.xml中设置的ID一致-->
			<id>nexus-registry</id>
			<url>http://192.168.202.129:8081/repository/maven-releases/</url>
		</repository>
	</distributionManagement>

	<!--指定仓库地址拉取地址-->
	<repositories>
		<repository>
			<id>web-public</id>
			<name>public</name>
			<url>http://192.168.202.129:8081/repository/maven-public/</url>
		</repository>

		<repository>
			<id>web-snapshots</id>
			<name>snapshots</name>
			<url>http://192.168.202.129:8081/repository/maven-snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</repository>
	</repositories>


	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>

				<configuration>
					<image>
						<!--配置镜像名称-->
						<name>${docker.repostory}/boot/${project.name}:${project.version}</name>
						<!--镜像打包完成后自动推送到镜像仓库-->
						<publish>true</publish>
					</image>
					<docker>
						<!--Docker远程管理地址-->
						<host>${docker.host}</host>
						<!--不使用TLS访问-->
						<tlsVerify>false</tlsVerify>
						<!--Docker推送镜像仓库配置-->
						<publishRegistry>
							<!--推送镜像仓库用户名-->
							<username>${docker.username}</username>
							<!--推送镜像仓库密码-->
							<password>${docker.password}</password>
							<!--推送镜像仓库地址-->
							<url>${docker.registry}</url>
						</publishRegistry>
					</docker>
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.plugin.version}</version>
				<configuration>
					<!-- Docker Remote Api-->
					<dockerHost>${docker.host}</dockerHost>
					<!-- Docker 镜像私服-->
					<registry>${docker.registry}</registry>
					<!-- 认证信息-->
					<authConfig>
						<push>
							<username>${docker.username}</username>
							<password>${docker.password}</password>
						</push>
					</authConfig>
					<images>
						<image>
							<!-- 镜像名称： 172.17.0.111/library/pig-gateway:2.6.3-->
							<name>${docker.registry}/fabric8/${project.name}:${project.version}</name>
							<build>
								<dockerFile>${project.basedir}/Dockerfile</dockerFile>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker-exec</id>
						<phase>install</phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
